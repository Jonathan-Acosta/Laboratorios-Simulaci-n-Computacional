# Metodo Wichmann-hill
### La siguiente es la implementaciÃ²n del metodo wichmann-hill para generar un determinado conjunto de numeros pseudoaleatorios de acuerdo a los siguientes pasos:
### a) Seleccionar un valor para la semilla x0 de la funcion recursiva que este comprendido entre 1 y 3000
### b) Seleccionar un valor para la semilla y0 de la funcion recursiva que este comprendido entre 1 y 3000
### c) Seleccionar un valor para la semilla z0 de la funcion recursiva que este comprendido entre 1 y 3000
### d) Se calculan los valores de xi,yi y zi de la siguiente manera:
### xi=(171.0*x0)%30269
### yi=(172.0*y0)%30307
### zi=(170.0*z0)%30323
### e) Finalmente se calcula el ui que sera el valor aleatorio a mostrar
### Los demas valores se calculan con los anteriores


def wichmannhill(x0,y0,z0,cantidad):
    arreglo=[]
    if x0>=1 and x0<=30000 and y0>=1 and y0<=30000 and z0>=1 and z0<=30000:
        for i in range(cantidad):
            xi=(171.0*x0)%30269
            yi=(172.0*y0)%30307
            zi=(170.0*z0)%30323
            ui=(xi/30269 + yi/30307 + zi/30323)%1
            arreglo.append(ui)
            x0=xi
            y0=yi
            z0=zi
    return arreglo
import numpy as np
import matplotlib.pyplot as plt
import math
def grafica(radio,muestras):
    delta=1.0*math.pow(2.0*radio,2)/(muestras)
    sumaTotal=0.0
    fig, ax = plt.subplots()
    for i in range(0,muestras):
        if radio>=math.pow(math.pow((2.0*radio * wichmannhill(15263,6980,4526,muestras)[i]) - radio,2)+math.pow((2.0*radio * wichmannhill(25412,1236,8956,muestras)[i]) - radio,2),.5):
            sumaTotal+=1.0
            ax.plot((2.0*radio * wichmannhill(15263,6980,4526,muestras)[i]) - radio, (2.0*radio * wichmannhill(25412,1236,8956,muestras)[i]) - radio, 'o', color='red')
        else:
            ax.plot((2.0*radio * wichmannhill(15263,6980,4526,muestras)[i]) - radio, (2.0*radio * wichmannhill(25412,1236,8956,muestras)[i]) - radio, 'o', color='blue')
    an = np.linspace(0, 2*np.pi, 100)
    plt.plot(radio*np.cos(an), radio*np.sin(an))
    plt.axis('equal')
    plt.axis([-radio, radio, -radio, radio])
    plt.show()
    total=sumaTotal*delta
    print "Area estimada"
    print total
    print "Area real"
    print math.pi*math.pow(radio,2)
    print "Diferencia"
    print abs(math.pi*math.pow(radio,2)-total)
    generaHistograma()
def generaHistograma():
    data=[]
    arreglo=wichmannhill(15263,6980,4526,100)
    for i in range(len(arreglo)):
        if arreglo[i]<=0.1:
            data.append(0.0)
        if arreglo[i]>0.1 and arreglo[i]<=0.2:
            data.append(0.1)
        if arreglo[i]>0.2 and arreglo[i]<=0.3:
            data.append(0.2)
        if arreglo[i]>0.3 and arreglo[i]<=0.4:
            data.append(0.3)
        if arreglo[i]>0.4 and arreglo[i]<=0.5:
            data.append(0.4)
        if arreglo[i]>0.5 and arreglo[i]<=0.6:
            data.append(0.5)
        if arreglo[i]>0.6 and arreglo[i]<=0.7:
            data.append(0.6)
        if arreglo[i]>0.7 and arreglo[i]<=0.8:
            data.append(0.7)
        if arreglo[i]>0.8 and arreglo[i]<=0.9:
            data.append(0.8)
        if arreglo[i]>0.9 and arreglo[i]<=1.0:
            data.append(0.9)   
    #hist(data,10, (0,10))
    #show()
    count, bins, ignored = plt.hist(data, 10, normed=True)
    plt.show()
radio = input('Ingrese el valor del radio:')
muestra= input('Ingrese el numero de numeros aleatorios que desea generar:')
grafica(radio,muestra)
